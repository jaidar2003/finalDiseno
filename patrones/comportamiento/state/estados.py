from abc import ABC, abstractmethod

class Estado(ABC):
    @abstractmethod
    def reproducir(self, reproductor): pass

    @abstractmethod
    def pausar(self, reproductor): pass

    @abstractmethod
    def detener(self, reproductor): pass


class EstadoReproduciendo(Estado):
    def reproducir(self, r): print("üîÅ Ya est√° reproduciendo.")
    def pausar(self, r):
        print("‚è∏ Pausando...")
        r.set_estado(EstadoPausado())

    def detener(self, r):
        print("‚èπ Deteniendo...")
        r.set_estado(EstadoDetenido())


class EstadoPausado(Estado):
    def reproducir(self, r):
        print("‚ñ∂Ô∏è Reanudando reproducci√≥n...")
        r.set_estado(EstadoReproduciendo())

    def pausar(self, r): print("‚è∏ Ya est√° pausado.")
    def detener(self, r):
        print("‚èπ Deteniendo desde pausa...")
        r.set_estado(EstadoDetenido())


class EstadoDetenido(Estado):
    def reproducir(self, r):
        print("‚ñ∂Ô∏è Comenzando a reproducir...")
        r.set_estado(EstadoReproduciendo())

    def pausar(self, r): print("‚ö†Ô∏è No se puede pausar: est√° detenido.")
    def detener(self, r): print("‚èπ Ya est√° detenido.")
